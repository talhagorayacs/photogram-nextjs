"use client";
import React, { useState, useEffect } from "react";
import { Loader } from "lucide-react"; // Import the loader icon
import { useSession ,signOut} from "next-auth/react";
import { useRouter } from "next/navigation";
const ImageComponent = () => {
  const [imageSrc, setImageSrc] = useState(null); // Set initial state to null
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);
  const [shareloading, setShareLoading] = useState(false);

  const [username, setUsername] = useState("");
  const [userId, setUserId] = useState("");
  const [imageBlob, setImageBlob] = useState(null); // State for storing the image blob
  const { data: session } = useSession();
  const user = session?.user;
  const router = useRouter()
  const prompts = [
    "A beautiful sunset over the mountains",
    "A futuristic city skyline at night",
    "A serene beach with palm trees",
    "A majestic dragon flying over a castle",
    "A dense forest with rays of sunlight filtering through",
  ];

  const handleCreateImage = async () => {
    const output_format = "webp";

    if (prompt === "") {
      alert("Enter a prompt");
      return;
    }

    try {
      setLoading(true);
      const response = await fetch("/api/generateimage", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt, output_format }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const imageUrl = URL.createObjectURL(blob);
        setImageSrc(imageUrl);
        setImageBlob(blob); 
      } else {
        const errorData = await response.text();
        console.error("Error:", errorData);
      }
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user) {
      setUsername(user.username);
      setUserId(user._id);
    } else {
      console.log("No session found");
    }
  }, [user]);

  const handleShare = async () => {
    if (!imageBlob) {
      alert("No image available to share");
      return;
    }

    const formData = new FormData();
    formData.append("file", imageBlob, "generatedImage.jpeg");
    formData.append("username", username);
    formData.append("caption", prompt);
    formData.append("id", userId);

    try {
      setShareLoading(true);
      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });
      console.log(response, "response from frontend");

      if (!response.ok) {
        throw new Error("Upload failed");
      }

      const data = await response.json();
      console.log(data);
      router.push("/posts")
    } catch (error) {
      console.log("Error uploading file:", error);
    } finally {
      setShareLoading(false); 
    }
  };

  const handleRandomPrompt = () => {
    const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];
    setPrompt(randomPrompt);
  };

  return (
    <div className="flex flex-col items-center justify-center p-5 dark:bg-gray-900">
      <div className="mb-5 w-full max-w-xs h-auto flex items-center justify-center bg-gray-200 dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-700">
        {loading ? (
          <div className="flex flex-col items-center justify-center p-5">
            <Loader className="animate-spin mb-2" size={40} />
            <p className="text-gray-700 dark:text-gray-300">Generating Image...</p>
          </div>
        ) : imageSrc ? (
          <img
            src={imageSrc}
            alt="Generated by AI"
            className="w-full h-auto rounded-lg"
          />
        ) : (
          <div className="flex flex-col items-center justify-center p-5">
            <p className="text-gray-700 dark:text-gray-300">No Image Generated Yet</p>
            <p className="text-sm text-gray-500 dark:text-gray-400">Enter a prompt and click "Create Image with AI" to get started.</p>
          </div>
        )}
      </div>
      <input
        type="text"
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        placeholder="Enter a prompt"
        className="mb-5 p-2 border border-gray-300 rounded-lg w-full max-w-lg dark:bg-gray-800 dark:text-white dark:border-gray-700"
      />
      <button
        onClick={handleRandomPrompt}
        className="mb-5 px-5 py-3 bg-green-500 text-white rounded-lg transition duration-300 hover:bg-green-700 dark:bg-green-700 dark:hover:bg-green-900"
      >
        Select Random Prompt
      </button>
      <div className="flex gap-4 items-center">
        <button
          onClick={handleCreateImage}
          className="px-5 py-3 bg-blue-500 text-white rounded-lg transition duration-300 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-900"
          disabled={loading}
        >
          {loading ? (
            <div className="flex items-center gap-2">
              <Loader className="animate-spin" size={20} />
              Generating...
            </div>
          ) : (
            "Create Image with AI"
          )}
        </button>
        <button
          onClick={handleShare}
          className="px-5 py-3 bg-blue-500 text-white rounded-lg transition duration-300 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-900"
          disabled={!imageBlob || loading} 
        >
          {shareloading ? (
            <div className="flex items-center gap-2">
              <Loader className="animate-spin" size={20} />
              Sharing...
            </div>
          ) : (
            "Share with community"
          )}
        </button>
      </div>
    </div>
  );
};

export default ImageComponent;
